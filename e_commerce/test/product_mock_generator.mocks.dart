// Mocks generated by Mockito 5.4.4 from annotations
// in e_commerce/test/product_mock_generator.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;
import 'dart:convert' as _i23;
import 'dart:typed_data' as _i24;

import 'package:dartz/dartz.dart' as _i2;
import 'package:e_commerce/core/device/network_info/network_info.dart' as _i16;
import 'package:e_commerce/core/error/failures/failures.dart' as _i12;
import 'package:e_commerce/features/product/data/data%20sources/local/local_data_source.dart'
    as _i14;
import 'package:e_commerce/features/product/data/data%20sources/remote/remote_data_source.dart'
    as _i15;
import 'package:e_commerce/features/product/data/model/product_model.dart'
    as _i3;
import 'package:e_commerce/features/product/domain/entities/product_entity.dart'
    as _i13;
import 'package:e_commerce/features/product/domain/repository/product_repository.dart'
    as _i4;
import 'package:e_commerce/features/product/domain/usecases/delete_product_usecase.dart'
    as _i9;
import 'package:e_commerce/features/product/domain/usecases/get_all_product_uc.dart'
    as _i5;
import 'package:e_commerce/features/product/domain/usecases/get_product_uc.dart'
    as _i6;
import 'package:e_commerce/features/product/domain/usecases/insert_product.dart'
    as _i8;
import 'package:e_commerce/features/product/domain/usecases/update_product_uc.dart'
    as _i7;
import 'package:e_commerce/features/product/presentation/bloc/product_bloc.dart'
    as _i18;
import 'package:e_commerce/features/product/presentation/bloc/product_event.dart'
    as _i21;
import 'package:e_commerce/features/product/presentation/bloc/product_state.dart'
    as _i19;
import 'package:flutter_bloc/flutter_bloc.dart' as _i22;
import 'package:http/http.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i20;
import 'package:shared_preferences/shared_preferences.dart' as _i17;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductModel_1 extends _i1.SmartFake implements _i3.ProductModel {
  _FakeProductModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductRepository_2 extends _i1.SmartFake
    implements _i4.ProductRepository {
  _FakeProductRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetAllProductUsecase_3 extends _i1.SmartFake
    implements _i5.GetAllProductUsecase {
  _FakeGetAllProductUsecase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetProductUsecase_4 extends _i1.SmartFake
    implements _i6.GetProductUsecase {
  _FakeGetProductUsecase_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateProductUsecase_5 extends _i1.SmartFake
    implements _i7.UpdateProductUsecase {
  _FakeUpdateProductUsecase_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInsertProductUsecase_6 extends _i1.SmartFake
    implements _i8.InsertProductUsecase {
  _FakeInsertProductUsecase_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteProductUsecase_7 extends _i1.SmartFake
    implements _i9.DeleteProductUsecase {
  _FakeDeleteProductUsecase_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_8 extends _i1.SmartFake implements _i10.Response {
  _FakeResponse_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_9 extends _i1.SmartFake
    implements _i10.StreamedResponse {
  _FakeStreamedResponse_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepository extends _i1.Mock implements _i4.ProductRepository {
  MockProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.Either<_i12.Failure, bool>> insertProduct(
          {required _i13.ProductEntity? product}) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertProduct,
          [],
          {#product: product},
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, bool>>.value(
            _FakeEither_0<_i12.Failure, bool>(
          this,
          Invocation.method(
            #insertProduct,
            [],
            {#product: product},
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, bool>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>> getProduct(
          {required String? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProduct,
          [],
          {#id: id},
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>>.value(
                _FakeEither_0<_i12.Failure, _i13.ProductEntity>(
          this,
          Invocation.method(
            #getProduct,
            [],
            {#id: id},
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, List<_i13.ProductEntity>>>
      getAllProduct() => (super.noSuchMethod(
            Invocation.method(
              #getAllProduct,
              [],
            ),
            returnValue: _i11.Future<
                    _i2.Either<_i12.Failure, List<_i13.ProductEntity>>>.value(
                _FakeEither_0<_i12.Failure, List<_i13.ProductEntity>>(
              this,
              Invocation.method(
                #getAllProduct,
                [],
              ),
            )),
          ) as _i11.Future<_i2.Either<_i12.Failure, List<_i13.ProductEntity>>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, bool>> updateProduct({
    required String? id,
    required _i13.ProductEntity? product,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [],
          {
            #id: id,
            #product: product,
          },
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, bool>>.value(
            _FakeEither_0<_i12.Failure, bool>(
          this,
          Invocation.method(
            #updateProduct,
            [],
            {
              #id: id,
              #product: product,
            },
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, bool>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, bool>> deleteProduct(
          {required String? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [],
          {#id: id},
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, bool>>.value(
            _FakeEither_0<_i12.Failure, bool>(
          this,
          Invocation.method(
            #deleteProduct,
            [],
            {#id: id},
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, bool>>);
}

/// A class which mocks [ProductLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductLocalDataSource extends _i1.Mock
    implements _i14.ProductLocalDataSource {
  MockProductLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<bool> removeFromCach({required String? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromCach,
          [],
          {#id: id},
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<_i3.ProductModel>? getProductFromCach({required String? id}) =>
      (super.noSuchMethod(Invocation.method(
        #getProductFromCach,
        [],
        {#id: id},
      )) as _i11.Future<_i3.ProductModel>?);

  @override
  _i11.Future<bool> insertProductToCach(
          {required _i3.ProductModel? productModel}) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertProductToCach,
          [],
          {#productModel: productModel},
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> updateOnCache({
    required String? id,
    required _i3.ProductModel? productModel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOnCache,
          [],
          {
            #id: id,
            #productModel: productModel,
          },
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);
}

/// A class which mocks [ProductRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRemoteDataSource extends _i1.Mock
    implements _i15.ProductRemoteDataSource {
  MockProductRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<bool> deleteProduct({required String? id}) => (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [],
          {#id: id},
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<List<_i3.ProductModel>> getAllProduct() => (super.noSuchMethod(
        Invocation.method(
          #getAllProduct,
          [],
        ),
        returnValue:
            _i11.Future<List<_i3.ProductModel>>.value(<_i3.ProductModel>[]),
      ) as _i11.Future<List<_i3.ProductModel>>);

  @override
  _i11.Future<_i3.ProductModel> getProduct({required String? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProduct,
          [],
          {#id: id},
        ),
        returnValue: _i11.Future<_i3.ProductModel>.value(_FakeProductModel_1(
          this,
          Invocation.method(
            #getProduct,
            [],
            {#id: id},
          ),
        )),
      ) as _i11.Future<_i3.ProductModel>);

  @override
  _i11.Future<bool> insertProduct({required _i3.ProductModel? productModel}) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertProduct,
          [],
          {#productModel: productModel},
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> updateProduct({
    required String? id,
    required _i3.ProductModel? productModel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [],
          {
            #id: id,
            #productModel: productModel,
          },
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i16.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i17.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i11.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [GetAllProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllProductUsecase extends _i1.Mock
    implements _i5.GetAllProductUsecase {
  MockGetAllProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ProductRepository get productRepository => (super.noSuchMethod(
        Invocation.getter(#productRepository),
        returnValue: _FakeProductRepository_2(
          this,
          Invocation.getter(#productRepository),
        ),
      ) as _i4.ProductRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, List<_i13.ProductEntity>>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i11
            .Future<_i2.Either<_i12.Failure, List<_i13.ProductEntity>>>.value(
            _FakeEither_0<_i12.Failure, List<_i13.ProductEntity>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, List<_i13.ProductEntity>>>);
}

/// A class which mocks [InsertProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockInsertProductUsecase extends _i1.Mock
    implements _i8.InsertProductUsecase {
  MockInsertProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ProductRepository get productRepository => (super.noSuchMethod(
        Invocation.getter(#productRepository),
        returnValue: _FakeProductRepository_2(
          this,
          Invocation.getter(#productRepository),
        ),
      ) as _i4.ProductRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, bool>> execute(
          {required _i13.ProductEntity? product}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#product: product},
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, bool>>.value(
            _FakeEither_0<_i12.Failure, bool>(
          this,
          Invocation.method(
            #execute,
            [],
            {#product: product},
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, bool>>);
}

/// A class which mocks [DeleteProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteProductUsecase extends _i1.Mock
    implements _i9.DeleteProductUsecase {
  MockDeleteProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ProductRepository get productRepository => (super.noSuchMethod(
        Invocation.getter(#productRepository),
        returnValue: _FakeProductRepository_2(
          this,
          Invocation.getter(#productRepository),
        ),
      ) as _i4.ProductRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, bool>> execute({required String? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#id: id},
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, bool>>.value(
            _FakeEither_0<_i12.Failure, bool>(
          this,
          Invocation.method(
            #execute,
            [],
            {#id: id},
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, bool>>);
}

/// A class which mocks [UpdateProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProductUsecase extends _i1.Mock
    implements _i7.UpdateProductUsecase {
  MockUpdateProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ProductRepository get productRepository => (super.noSuchMethod(
        Invocation.getter(#productRepository),
        returnValue: _FakeProductRepository_2(
          this,
          Invocation.getter(#productRepository),
        ),
      ) as _i4.ProductRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, bool>> execute({
    required String? id,
    required _i13.ProductEntity? product,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #id: id,
            #product: product,
          },
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, bool>>.value(
            _FakeEither_0<_i12.Failure, bool>(
          this,
          Invocation.method(
            #execute,
            [],
            {
              #id: id,
              #product: product,
            },
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, bool>>);
}

/// A class which mocks [GetProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductUsecase extends _i1.Mock implements _i6.GetProductUsecase {
  MockGetProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ProductRepository get productRepository => (super.noSuchMethod(
        Invocation.getter(#productRepository),
        returnValue: _FakeProductRepository_2(
          this,
          Invocation.getter(#productRepository),
        ),
      ) as _i4.ProductRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>> execute(
          {required String? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#id: id},
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>>.value(
                _FakeEither_0<_i12.Failure, _i13.ProductEntity>(
          this,
          Invocation.method(
            #execute,
            [],
            {#id: id},
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i13.ProductEntity>>);
}

/// A class which mocks [ProductBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductBloc extends _i1.Mock implements _i18.ProductBloc {
  MockProductBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.GetAllProductUsecase get getAllProductUsecase => (super.noSuchMethod(
        Invocation.getter(#getAllProductUsecase),
        returnValue: _FakeGetAllProductUsecase_3(
          this,
          Invocation.getter(#getAllProductUsecase),
        ),
      ) as _i5.GetAllProductUsecase);

  @override
  _i6.GetProductUsecase get getSingleProductUsecase => (super.noSuchMethod(
        Invocation.getter(#getSingleProductUsecase),
        returnValue: _FakeGetProductUsecase_4(
          this,
          Invocation.getter(#getSingleProductUsecase),
        ),
      ) as _i6.GetProductUsecase);

  @override
  _i7.UpdateProductUsecase get updateProductUsecase => (super.noSuchMethod(
        Invocation.getter(#updateProductUsecase),
        returnValue: _FakeUpdateProductUsecase_5(
          this,
          Invocation.getter(#updateProductUsecase),
        ),
      ) as _i7.UpdateProductUsecase);

  @override
  _i8.InsertProductUsecase get insertProductUsecase => (super.noSuchMethod(
        Invocation.getter(#insertProductUsecase),
        returnValue: _FakeInsertProductUsecase_6(
          this,
          Invocation.getter(#insertProductUsecase),
        ),
      ) as _i8.InsertProductUsecase);

  @override
  _i9.DeleteProductUsecase get deleteProductUsecase => (super.noSuchMethod(
        Invocation.getter(#deleteProductUsecase),
        returnValue: _FakeDeleteProductUsecase_7(
          this,
          Invocation.getter(#deleteProductUsecase),
        ),
      ) as _i9.DeleteProductUsecase);

  @override
  _i19.ProductState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i20.dummyValue<_i19.ProductState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i19.ProductState);

  @override
  _i11.Stream<_i19.ProductState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i11.Stream<_i19.ProductState>.empty(),
      ) as _i11.Stream<_i19.ProductState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i11.Future<bool> createProduct(_i21.CreateProductEvent? event) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProduct,
          [event],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  void add(_i21.ProductEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i21.ProductEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i19.ProductState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i21.ProductEvent>(
    _i22.EventHandler<E, _i19.ProductState>? handler, {
    _i22.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i22.Transition<_i21.ProductEvent, _i19.ProductState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  void onChange(_i22.Change<_i19.ProductState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i10.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i10.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<_i10.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<_i10.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i23.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<_i10.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i23.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<_i10.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i23.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<_i10.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i23.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i10.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i10.Response>);

  @override
  _i11.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<String>.value(_i20.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i11.Future<String>);

  @override
  _i11.Future<_i24.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i24.Uint8List>.value(_i24.Uint8List(0)),
      ) as _i11.Future<_i24.Uint8List>);

  @override
  _i11.Future<_i10.StreamedResponse> send(_i10.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i11.Future<_i10.StreamedResponse>.value(_FakeStreamedResponse_9(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i11.Future<_i10.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
